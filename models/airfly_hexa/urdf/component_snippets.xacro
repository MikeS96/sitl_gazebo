<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Macro to add logging to a bag file. -->
  <xacro:macro name="bag_plugin_macro"
    params="namespace bag_file rotor_velocity_slowdown_sim">
    <gazebo>
      <plugin filename="librotors_gazebo_bag_plugin.so" name="rosbag">
        <robotNamespace>${namespace}</robotNamespace>
        <bagFileName>${bag_file}</bagFileName>
        <linkName>base_link</linkName>
        <frameId>base_link</frameId>
        <commandAttitudeThrustSubTopic>command/attitude</commandAttitudeThrustSubTopic>
        <commandAttitudeThrustPubTopic>command/attitude</commandAttitudeThrustPubTopic>
        <rotorVelocitySlowdownSim>${rotor_velocity_slowdown_sim}</rotorVelocitySlowdownSim>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add a camera. -->
  <xacro:macro name="camera_macro"
    params="namespace parent_link camera_suffix frame_rate
      horizontal_fov image_width image_height image_format min_distance
      max_distance noise_mean noise_stddev enable_visual *cylinder *origin">
    <link name="${namespace}/camera_${camera_suffix}_link">
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <box size="0.023813 0.027686 0.092682"/>
        </geometry>
      </collision>
      <xacro:if value="${enable_visual}">
        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="package://airfly_hexa/meshes/cam_link.STL" />
          </geometry>
          <material name="red" />
        </visual>
      </xacro:if>
      <inertial>
        <mass value="0.050075" />
        <origin xyz="-0.0013668 -1.5197e-5 0.00025326" rpy="0 0 0" />
        <inertia ixx="3.2061e-05" ixy="-1.169e-08" ixz="-4.2601e-10" iyy="3.0815e-05" iyz="5.2182e-10" izz="5.1652e-06" />
      </inertial>
    </link>
    <joint name="${namespace}/camera_${camera_suffix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/camera_${camera_suffix}_link" />
    </joint>
    <gazebo reference="${namespace}/camera_${camera_suffix}_link">
      <sensor type="camera" name="${namespace}_camera_${camera_suffix}">
        <update_rate>${frame_rate}</update_rate>
        <visualize>true</visualize>
        <always_on>1</always_on>
        <camera name="head">
          <pose>0 0 0 -1.5708 0 0</pose>
          <horizontal_fov>${horizontal_fov}</horizontal_fov>
          <image>
            <width>${image_width}</width>
            <height>${image_height}</height>
            <format>${image_format}</format>
          </image>
          <clip>
            <near>${min_distance}</near>
            <far>${max_distance}</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                 That pixel's noise value is added to each of its color
                 channels, which at that point lie in the range [0,1]. -->
            <mean>${noise_mean}</mean>
            <stddev>${noise_stddev}</stddev>
          </noise>
        </camera>
        <plugin name="${namespace}_camera_${camera_suffix}_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>${namespace}</robotNamespace>
          <alwaysOn>true</alwaysOn>
          <updateRate>${frame_rate}</updateRate>
          <cameraName>camera_${camera_suffix}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>camera_${camera_suffix}_link</frameName>
          <hackBaseline>0.0</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
      <material>Gazebo/DarkGrey</material>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add a LiDAR. -->
  <xacro:macro name="lidar_macro"
    params="link_name parent_link *origin">

    <link name="${link_name}">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://airfly_hexa/meshes/Lidar_Lite_Laser_Optics.STL" scale="0.002 0.002 0.002" />
        </geometry>
        <material name="white" />
      </visual>
      <inertial>
        <mass value="0.01" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="2.1733e-6" ixy="0" ixz="0" iyy="2.1733e-6" iyz="0" izz="1.8e-7" />
      </inertial>
    </link>
    <joint name="${link_name}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${link_name}" />
      <axis xyz="0 0 1"/>
      <limit lower="0" upper="0" effort="0" velocity="0"/>
    </joint>
    <gazebo reference="${link_name}">
      <sensor name="laser" type="ray">
        <pose>0 0 0 0 1.57079633 0</pose>
        <ray>
          <scan>
            <horizontal>
              <samples>1</samples>
              <resolution>1</resolution>
              <min_angle>-0</min_angle>
              <max_angle>0</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.06</min> <!-- do not change: use min_distance (below) for realistic behavior (smaller values cause issues) -->
            <max>35</max>   <!-- do not change: use min_distance (below) for realistic behavior (bigger values cause issues) -->
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.02</stddev>
          </noise>
        </ray>
        <plugin name="LaserPlugin" filename="libgazebo_lidar_plugin.so">
          <robotNamespace></robotNamespace>
          <min_distance>0.2</min_distance>
          <max_distance>15.0</max_distance>
        </plugin>
        <always_on>1</always_on>
        <update_rate>20</update_rate>
        <visualize>true</visualize>
      </sensor>
      <material>Gazebo/White</material>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the gps_plugin. -->
  <xacro:macro name="gps_plugin_macro" params="namespace gps_noise">
    <gazebo>
      <plugin name="gps_plugin" filename="libgazebo_gps_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <gpsNoise>${gps_noise}</gpsNoise>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the magnetometer_plugin. -->
  <xacro:macro name="magnetometer_plugin_macro" params="namespace pub_rate noise_density random_walk bias_correlation_time mag_topic">
    <gazebo>
      <plugin name="magnetometer_plugin" filename="libgazebo_magnetometer_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <pubRate>${pub_rate}</pubRate>
        <noiseDensity>${noise_density}</noiseDensity>
        <randomWalk>${random_walk}</randomWalk>
        <biasCorrelationTime>${bias_correlation_time}</biasCorrelationTime>
        <magTopic>${mag_topic}</magTopic>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add Ground Truth plugin -->
  <xacro:macro name="ground_truth_plugin_macro" params="base pub_rate groundt_topic z_offset">
    <gazebo>
      <plugin name="ground_truth" filename="libgazebo_ros_p3d.so">
        <frameName>map</frameName>
		<bodyName>${base}</bodyName>
		<topicName>${groundt_topic}</topicName>
		<updateRate>${pub_rate}</updateRate>
		<xyzOffset>0 0 ${z_offset}</xyzOffset>
		<rpyOffset>0 0 0</rpyOffset>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the barometer_plugin. -->
  <xacro:macro name="barometer_plugin_macro" params="namespace pub_rate baro_topic">
    <gazebo>
      <plugin name="barometer_plugin" filename="libgazebo_barometer_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <pubRate>${pub_rate}</pubRate>
        <baroTopic>${baro_topic}</baroTopic>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the mavlink interface. -->
  <xacro:macro name="mavlink_interface_macro" params="namespace imu_sub_topic gps_sub_topic mag_sub_topic baro_sub_topic mavlink_addr mavlink_udp_port mavlink_tcp_port serial_enabled serial_device baudrate qgc_addr qgc_udp_port sdk_addr sdk_udp_port hil_mode hil_state_level vehicle_is_tailsitter send_vision_estimation send_odometry enable_lockstep use_tcp">
    <gazebo>
      <plugin name="mavlink_interface" filename="libgazebo_mavlink_interface.so">
        <robotNamespace>${namespace}</robotNamespace>
        <imuSubTopic>${imu_sub_topic}</imuSubTopic>
        <gpsSubTopic>${gps_sub_topic}</gpsSubTopic>
        <magSubTopic>${mag_sub_topic}</magSubTopic>
        <baroSubTopic>${baro_sub_topic}</baroSubTopic>
        <mavlink_addr>$(arg mavlink_addr)</mavlink_addr>
        <mavlink_udp_port>$(arg mavlink_udp_port)</mavlink_udp_port>
        <mavlink_tcp_port>$(arg mavlink_tcp_port)</mavlink_tcp_port>
        <serialEnabled>$(arg serial_enabled)</serialEnabled>
        <serialDevice>$(arg serial_device)</serialDevice>
        <baudRate>$(arg baudrate)</baudRate>
        <qgc_addr>$(arg qgc_addr)</qgc_addr>
        <qgc_udp_port>$(arg qgc_udp_port)</qgc_udp_port>
        <sdk_addr>$(arg sdk_addr)</sdk_addr>
        <sdk_udp_port>$(arg sdk_udp_port)</sdk_udp_port>
        <hil_mode>$(arg hil_mode)</hil_mode>
        <hil_state_level>$(arg hil_state_level)</hil_state_level>
        <vehicle_is_tailsitter>$(arg vehicle_is_tailsitter)</vehicle_is_tailsitter>
        <send_vision_estimation>$(arg send_vision_estimation)</send_vision_estimation>
        <send_odometry>$(arg send_odometry)</send_odometry>
        <enable_lockstep>$(arg enable_lockstep)</enable_lockstep>
        <use_tcp>$(arg use_tcp)</use_tcp>
        <motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>
        <control_channels>
          <channel name="rotor1">
            <input_index>0</input_index>
            <input_offset>0</input_offset>
            <input_scaling>470</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>100</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name="rotor2">
            <input_index>1</input_index>
            <input_offset>0</input_offset>
            <input_scaling>470</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>100</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name="rotor3">
            <input_index>2</input_index>
            <input_offset>0</input_offset>
            <input_scaling>470</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>100</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name="rotor4">
            <input_index>3</input_index>
            <input_offset>0</input_offset>
            <input_scaling>470</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>100</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name='rotor4'>
            <input_index>4</input_index>
            <input_offset>0</input_offset>
            <input_scaling>470</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>100</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name='rotor5'>
            <input_index>5</input_index>
            <input_offset>0</input_offset>
            <input_scaling>470</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>100</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
        </control_channels>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add an IMU. -->
  <xacro:macro name="imu_plugin_macro"
    params="namespace imu_suffix parent_link imu_topic
      mass_imu_sensor gyroscope_noise_density gyroscopoe_random_walk
      gyroscope_bias_correlation_time gyroscope_turn_on_bias_sigma
      accelerometer_noise_density accelerometer_random_walk
      accelerometer_bias_correlation_time accelerometer_turn_on_bias_sigma
      *inertia *origin">
    <!-- IMU link -->
    <link name="${namespace}/imu${imu_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_imu_sensor}" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>
    <!-- IMU joint -->
    <joint name="${namespace}/imu${imu_suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/imu${imu_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="libgazebo_imu_plugin.so" name="rotors_gazebo_imu${imu_suffix}_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
        <robotNamespace>${namespace}</robotNamespace> <!-- (string, required): ros namespace in which the messages are published -->
        <linkName>${namespace}/imu${imu_suffix}_link</linkName> <!-- (string, required): name of the body which holds the IMU sensor -->
        <imuTopic>${imu_topic}</imuTopic> <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
        <gyroscopeNoiseDensity>${gyroscope_noise_density}</gyroscopeNoiseDensity> <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
        <gyroscopeRandomWalk>${gyroscopoe_random_walk}</gyroscopeRandomWalk> <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
        <gyroscopeBiasCorrelationTime>${gyroscope_bias_correlation_time}</gyroscopeBiasCorrelationTime> <!-- Gyroscope bias correlation time constant [s] -->
        <gyroscopeTurnOnBiasSigma>${gyroscope_turn_on_bias_sigma}</gyroscopeTurnOnBiasSigma> <!-- Gyroscope turn on bias standard deviation [rad/s] -->
        <accelerometerNoiseDensity>${accelerometer_noise_density}</accelerometerNoiseDensity> <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
        <accelerometerRandomWalk>${accelerometer_random_walk}</accelerometerRandomWalk> <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
        <accelerometerBiasCorrelationTime>${accelerometer_bias_correlation_time}</accelerometerBiasCorrelationTime> <!-- Accelerometer bias correlation time constant [s] -->
        <accelerometerTurnOnBiasSigma>${accelerometer_turn_on_bias_sigma}</accelerometerTurnOnBiasSigma> <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the wind plugin. -->
  <xacro:macro name="wind_plugin_macro"
    params="namespace xyz_offset wind_direction wind_force_mean
      wind_gust_direction wind_gust_duration wind_gust_start
      wind_gust_force_mean">
    <gazebo>
      <plugin filename="libgazebo_wind_plugin.so" name="wind_plugin">
        <frameId>base_link</frameId>
        <linkName>base_link</linkName>
        <robotNamespace>${namespace}</robotNamespace>
        <xyzOffset>${xyz_offset}</xyzOffset> <!-- [m] [m] [m] -->
        <windDirection>${wind_direction}</windDirection>
        <windForceMean>${wind_force_mean}</windForceMean> <!-- [N] -->
        <windGustDirection>${wind_gust_direction}</windGustDirection>
        <windGustDuration>${wind_gust_duration}</windGustDuration> <!-- [s] -->
        <windGustStart>${wind_gust_start}</windGustStart> <!-- [s] -->
        <windGustForceMean>${wind_gust_force_mean}</windGustForceMean> <!-- [N] -->
      </plugin>
    </gazebo>
  </xacro:macro>

</robot>
